{"version":3,"file":"azure-azureScript.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvsources":["webpack:///azure/node_modules/jwt-decode/build/jwt-decode.esm.js","webpack:///azure/webpack/bootstrap","webpack:///azure/webpack/runtime/define property getters","webpack:///azure/webpack/runtime/hasOwnProperty shorthand","webpack:///azure/webpack/runtime/make namespace object","webpack:///azure/src/azureScript.js"],"sourcesContent":["function e(e){this.message=e}e.prototype=new Error,e.prototype.name=\"InvalidCharacterError\";var r=\"undefined\"!=typeof window&&window.atob&&window.atob.bind(window)||function(r){var t=String(r).replace(/=+$/,\"\");if(t.length%4==1)throw new e(\"'atob' failed: The string to be decoded is not correctly encoded.\");for(var n,o,a=0,i=0,c=\"\";o=t.charAt(i++);~o&&(n=a%4?64*n+o:o,a++%4)?c+=String.fromCharCode(255&n>>(-2*a&6)):0)o=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(o);return c};function t(e){var t=e.replace(/-/g,\"+\").replace(/_/g,\"/\");switch(t.length%4){case 0:break;case 2:t+=\"==\";break;case 3:t+=\"=\";break;default:throw\"Illegal base64url string!\"}try{return function(e){return decodeURIComponent(r(e).replace(/(.)/g,(function(e,r){var t=r.charCodeAt(0).toString(16).toUpperCase();return t.length<2&&(t=\"0\"+t),\"%\"+t})))}(t)}catch(e){return r(t)}}function n(e){this.message=e}function o(e,r){if(\"string\"!=typeof e)throw new n(\"Invalid token specified\");var o=!0===(r=r||{}).header?0:1;try{return JSON.parse(t(e.split(\".\")[o]))}catch(e){throw new n(\"Invalid token specified: \"+e.message)}}n.prototype=new Error,n.prototype.name=\"InvalidTokenError\";export default o;export{n as InvalidTokenError};\n//# sourceMappingURL=jwt-decode.esm.js.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import jwt_decode from \"jwt-decode\";\n\n//Get URL and URL hash\nvar URLhash = window.location.hash;\nvar homeURL;\n\n//When page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n  if ((!URLhash || URLhash.length < 100) && !sessionStorage.getItem('MyToken') || sessionStorage.getItem('MyToken') && jwt_decode(sessionStorage.getItem('MyToken')).exp < Date.now() / 1000) {\n    sessionStorage.clear();\n    history.pushState(\"\", document.title, window.location.pathname + window.location.search);\n    homeURL = window.location.href;\n    oauth2Signin();\n  } else if (!sessionStorage.getItem('MyToken')) {\n    URLhash = URLhash.replace('#access_token=', '').split('&')[0];\n    sessionStorage.setItem('MyToken', URLhash);\n    history.pushState(\"\", document.title, window.location.pathname + window.location.search);\n    sendSubRequest();\n  } else if (URLhash) {\n    switch (URLhash.split('$')[0]) {\n      case '#VM-home':\n        sendVMRequest();\n        break;\n      case '#VM-start':\n        console.log(URLhash.split('$')[2]);\n        changeVMStatusRequest(URLhash.split('$')[1], URLhash.split('$')[2], false);\n        break;\n      case '#VM-stop':\n        console.log(URLhash.split('$')[2]);\n        changeVMStatusRequest(URLhash.split('$')[1], URLhash.split('$')[2], true);\n        break;\n      case '#VM-restart':\n        console.log(URLhash.split('$')[2]);\n        restartVMRequest(URLhash.split('$')[1], URLhash.split('$')[2]);\n        break;\n      case '#app-services-home':\n        sendAppServicesRequest();\n        break;\n      case '#app-start':\n        console.log(URLhash.split('$')[2]);\n        changeAppStatusRequest(URLhash.split('$')[1], URLhash.split('$')[2], false);\n        break;\n      case '#app-stop':\n        console.log(URLhash.split('$')[2]);\n        changeAppStatusRequest(URLhash.split('$')[1], URLhash.split('$')[2], true);\n        break;\n      case '#app-restart':\n        console.log(URLhash.split('$')[2]);\n        restartAppRequest(URLhash.split('$')[1], URLhash.split('$')[2]);\n        break;\n      case '#resource-groups-home':\n        sendResourceGroupRequest();\n        break;\n      default:\n        break;\n    }\n  } else {\n    sendSubRequest();\n  }\n});\nfunction oauth2Signin() {\n  //Oauth2 endpoint\n  var endpoint = 'https://login.microsoftonline.com/common/oauth2/authorize';\n\n  //This is the form we need in order to submit for authorization\n  var form = document.createElement('form');\n  form.setAttribute('method', 'GET');\n  form.setAttribute('action', endpoint);\n\n  //Parameters for the form\n  var params = {\n    'client_id': '457a5491-f470-4c0c-beae-efa300de112b',\n    'redirect_uri': homeURL,\n    'response_type': 'token',\n    'resource': 'https://management.core.windows.net'\n  };\n\n  //Inputing the parameters into the form\n  for (var p in params) {\n    var input = document.createElement('input');\n    input.setAttribute('type', 'hidden');\n    input.setAttribute('name', p);\n    input.setAttribute('value', params[p]);\n    form.appendChild(input);\n  }\n\n  //Submit form\n  document.body.appendChild(form);\n  form.submit();\n\n  //After this, we're redirected back to the Nextcloud app with the token in the URL hash\n}\n\nlet sendSubRequest = ev => {\n  //Getting parameters needed to make the API call\n  let subscriptionURL = 'https://management.azure.com/subscriptions?api-version=2022-12-01';\n  let token = sessionStorage.getItem('MyToken');\n  let header = new Headers({\n    'Authorization': \"Bearer \".concat(token)\n  });\n  //header.append('Authorization', `Bearer ${token}`);\n  console.log(header);\n\n  //Creating the request\n  let request = new Request(subscriptionURL, {\n    method: 'GET',\n    mode: 'cors',\n    headers: header\n  });\n  console.log(request);\n\n  //Create function that actually sends the request\n  async function fetchSubscriptionID() {\n    let subID;\n    fetch(request).then(response => response.json()).then(data => {\n      console.log(data);\n      subID = data;\n      sessionStorage.setItem('subID', data.value[0].id);\n    }).catch(error => {\n      console.error(error.message);\n    });\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(subID);\n      }, 2000);\n    });\n  }\n\n  //Adds subscription info to HTML\n  async function addSubtoHTML() {\n    const subInfo = await fetchSubscriptionID();\n\n    //Create title and add to page\n    const pageTitle = document.createElement('h1');\n    pageTitle.setAttribute('class', 'content-title');\n    const titleText = document.createTextNode(\"Subscriptions\");\n    pageTitle.appendChild(titleText);\n    const titleElement = document.getElementById('title-wrapper');\n    titleElement.appendChild(pageTitle);\n\n    //Add each subscription name to page\n    if (subInfo.value.length > 0) {\n      for (let i = 0; i < subInfo.value.length; i++) {\n        const newEntry = document.createElement('tr');\n        newEntry.setAttribute('class', 'content-entry');\n        const entryText = document.createTextNode(subInfo.value[i].displayName);\n        newEntry.appendChild(entryText);\n        const tableElement = document.getElementById('content-list');\n        tableElement.appendChild(newEntry);\n      }\n    } else {\n      const newEntry = document.createElement('tr');\n      newEntry.setAttribute('class', 'content-entry');\n      const entryText = document.createTextNode(\"No Subscriptions\");\n      newEntry.appendChild(entryText);\n      const tableElement = document.getElementById('content-list');\n      tableElement.appendChild(newEntry);\n    }\n  }\n  addSubtoHTML();\n};\nif (!sessionStorage.getItem('subID')) {\n  setTimeout(createButtons, 2000);\n} else {\n  createButtons();\n}\nfunction createButtons() {\n  var subscriptionsButton;\n  var VMButton;\n  var appServicesButton;\n  var resourceGroupButton;\n  var baseDiv;\n  if (sessionStorage.getItem('subID')) {\n    var navElement = document.getElementById('app-navigation-vue');\n\n    //Create subscriptions button\n    //The process for creating buttons is basically the same across all of them\n    subscriptionsButton = document.createElement('a');\n    subscriptionsButton.setAttribute('class', 'app-navigation-entry-link');\n    baseDiv = document.createElement('div');\n    baseDiv.setAttribute('class', 'app-navigation-entry');\n\n    //Add subscription button to a div for all the buttons\n    var entryText = document.createTextNode('Subscriptions');\n    subscriptionsButton.appendChild(entryText);\n    baseDiv.appendChild(subscriptionsButton);\n\n    //Create Resource Groups Button\n    resourceGroupButton = document.createElement('a');\n    resourceGroupButton.setAttribute('class', 'app-navigation-entry-link');\n\n    //Add Resource Groups button to the div\n    entryText = document.createTextNode('Resource Groups');\n    resourceGroupButton.appendChild(entryText);\n    baseDiv.appendChild(resourceGroupButton);\n\n    //Create VM button\n    VMButton = document.createElement('a');\n    VMButton.setAttribute('class', 'app-navigation-entry-link');\n\n    //Add VM button to the div\n    entryText = document.createTextNode('Virtual Machines');\n    VMButton.appendChild(entryText);\n    baseDiv.appendChild(VMButton);\n\n    //Create App Services Button\n    appServicesButton = document.createElement('a');\n    appServicesButton.setAttribute('class', 'app-navigation-entry-link');\n\n    //Add App Services button to the div\n    entryText = document.createTextNode('App Services');\n    appServicesButton.appendChild(entryText);\n    baseDiv.appendChild(appServicesButton);\n\n    //Add div to page\n    navElement.appendChild(baseDiv);\n\n    //Events for when the user clicks the appropriate button\n    //Adds the hash to the URL to let the site know what page to load\n    //and then reloads the page\n\n    subscriptionsButton.addEventListener('click', () => {\n      window.location.hash = '';\n      location.reload();\n    });\n    VMButton.addEventListener('click', () => {\n      window.location.hash = '#VM-home';\n      location.reload();\n    });\n    appServicesButton.addEventListener('click', () => {\n      window.location.hash = '#app-services-home';\n      location.reload();\n    });\n    resourceGroupButton.addEventListener('click', () => {\n      window.location.hash = '#resource-groups-home';\n      location.reload();\n    });\n  }\n}\nlet statusButtonClicked = false;\nlet sendVMRequest = ev => {\n  const subscriptionID = sessionStorage.getItem('subID');\n  let VMInfo;\n  let vmURL = 'https://management.azure.com'.concat(subscriptionID, '/providers/Microsoft.Compute/virtualMachines?api-version=2023-07-01&statusOnly=true');\n  let token = sessionStorage.getItem('MyToken');\n  let header = new Headers();\n  header.append('Authorization', \"Bearer \".concat(token));\n  let vmRequest = new Request(vmURL, {\n    method: 'GET',\n    mode: 'cors',\n    headers: header\n  });\n\n  //Create function that actually sends the request\n  async function fetchVM() {\n    fetch(vmRequest).then(response => response.json()).then(data => {\n      console.log(data);\n      VMInfo = data;\n    }).catch(error => {\n      console.log(\"Error message:\");\n      console.error(error.message);\n    });\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(VMInfo);\n      }, 2000);\n    });\n  }\n  async function addVMToHTML() {\n    const VMInfo = await fetchVM();\n\n    //Create title and add to page\n    const pageTitle = document.createElement('h1');\n    pageTitle.setAttribute('class', 'content-title');\n    const titleText = document.createTextNode(\"Virtual Machines\");\n    pageTitle.appendChild(titleText);\n    const titleElement = document.getElementById('title-wrapper');\n    titleElement.appendChild(pageTitle);\n\n    //Create header and add to page\n    const newEntry = document.createElement('tr');\n    newEntry.setAttribute('class', 'content-entry');\n\n    //Create element for name header\n    const nameElement = document.createElement('div');\n    nameElement.setAttribute('class', 'content-name');\n    const nameText = document.createTextNode('Name');\n    nameElement.appendChild(nameText);\n    newEntry.appendChild(nameElement);\n\n    //Create element for status header\n    const stateElement = document.createElement('div');\n    stateElement.setAttribute('class', 'content-state');\n    const stateText = document.createTextNode('Status');\n    stateElement.appendChild(stateText);\n    newEntry.appendChild(stateElement);\n    const tableElement = document.getElementById('content-list');\n    tableElement.appendChild(newEntry);\n\n    //Add each VM info to page\n    if (VMInfo.value.length > 0) {\n      for (let i = 0; i < VMInfo.value.length; i++) {\n        //Create table entry\n        const newEntry = document.createElement('tr');\n        newEntry.setAttribute('class', 'content-entry');\n\n        //Create element for VM name\n        const nameElement = document.createElement('div');\n        nameElement.setAttribute('class', 'content-name');\n        const nameText = document.createTextNode(VMInfo.value[i].name);\n        nameElement.appendChild(nameText);\n        newEntry.appendChild(nameElement);\n\n        //Create element for VM status\n        const stateElement = document.createElement('div');\n        stateElement.setAttribute('class', 'content-state');\n        let stateText = document.createTextNode(VMInfo.value[i].properties.instanceView.statuses[1].displayStatus);\n        if (VMInfo.value[i].properties.instanceView.statuses[1].displayStatus == 'VM deallocated' && VMInfo.value[i].properties.instanceView.statuses[0].displayStatus == 'Updating') {\n          stateText = document.createTextNode('VM starting');\n        }\n        stateElement.appendChild(stateText);\n        newEntry.appendChild(stateElement);\n\n        //Create start/stop button\n        const buttonElement = document.createElement('button');\n        buttonElement.setAttribute('class', 'content-button');\n        var buttonText;\n        if (stateElement.innerHTML == 'VM running' || stateElement.innerHTML == 'VM starting') {\n          buttonText = document.createTextNode('Stop VM');\n          buttonElement.addEventListener('click', () => {\n            window.location.hash = '#VM-stop$'.concat(VMInfo.value[i].name, '$', VMInfo.value[i].id.split('/')[4]);\n            location.reload();\n          });\n        } else {\n          buttonText = document.createTextNode('Start VM');\n          buttonElement.addEventListener('click', () => {\n            window.location.hash = '#VM-start$'.concat(VMInfo.value[i].name, '$', VMInfo.value[i].id.split('/')[4]);\n            location.reload();\n          });\n        }\n        buttonElement.appendChild(buttonText);\n        newEntry.appendChild(buttonElement);\n\n        //Create restart button\n\n        if (stateElement.innerHTML == 'VM running') {\n          const restartElement = document.createElement('button');\n          restartElement.setAttribute('class', 'content-button');\n          const restartText = document.createTextNode('Restart VM');\n          restartElement.appendChild(restartText);\n          restartElement.addEventListener('click', () => {\n            window.location.hash = '#VM-restart$'.concat(VMInfo.value[i].name, '$', VMInfo.value[i].id.split('/')[4]);\n            location.reload();\n          });\n          newEntry.appendChild(restartElement);\n        }\n        const tableElement = document.getElementById('content-list');\n        tableElement.appendChild(newEntry);\n      }\n    } else {\n      const nameElement = document.createElement('div');\n      nameElement.setAttribute('class', 'content-name');\n      const nameText = document.createTextNode(\"No VMs\");\n      nameElement.appendChild(nameText);\n      newEntry.appendChild(nameElement);\n    }\n  }\n  addVMToHTML();\n};\nfunction changeVMStatusRequest(vmName, resourceGroup, vmRunning) {\n  const pageTitle = document.createElement('h1');\n  pageTitle.style.justifySelf = \"center\";\n  pageTitle.setAttribute('class', 'content-title');\n  const titleText = document.createTextNode(\"Processing Request\");\n  pageTitle.appendChild(titleText);\n  const titleElement = document.getElementById('title-wrapper');\n  titleElement.style.justifySelf = \"center\";\n  titleElement.style.alignSelf = \"center\";\n  titleElement.style.paddingTop = \"500px\";\n  titleElement.style.paddingLeft = \"0px\";\n  titleElement.appendChild(pageTitle);\n  const loaderMain = document.createElement('div');\n  loaderMain.setAttribute('class', 'lds-ellipsis');\n  const loaderChild1 = document.createElement('div');\n  loaderMain.appendChild(loaderChild1);\n  const loaderChild2 = document.createElement('div');\n  loaderMain.appendChild(loaderChild2);\n  const loaderChild3 = document.createElement('div');\n  loaderMain.appendChild(loaderChild3);\n  const loaderChild4 = document.createElement('div');\n  loaderMain.appendChild(loaderChild4);\n  titleElement.appendChild(loaderMain);\n  console.log(vmRunning);\n  const subscriptionID = sessionStorage.getItem('subID');\n  let changeStatusURL;\n  let token = sessionStorage.getItem('MyToken');\n  let header = new Headers();\n  header.append('Authorization', \"Bearer \".concat(token));\n  let changeStatusRequest;\n  if (vmRunning) {\n    changeStatusURL = 'https://management.azure.com'.concat(subscriptionID, '/resourceGroups/', resourceGroup, '/providers/Microsoft.Compute/virtualMachines/', vmName, '/deallocate?api-version=2023-07-01');\n    changeStatusRequest = new Request(changeStatusURL, {\n      method: 'POST',\n      mode: 'cors',\n      headers: header\n    });\n  } else {\n    changeStatusURL = 'https://management.azure.com'.concat(subscriptionID, '/resourceGroups/', resourceGroup, '/providers/Microsoft.Compute/virtualMachines/', vmName, '/start?api-version=2023-07-01');\n    changeStatusRequest = new Request(changeStatusURL, {\n      method: 'POST',\n      mode: 'cors',\n      headers: header\n    });\n  }\n  async function fetchChangeStatus() {\n    let statusChanged;\n    fetch(changeStatusRequest).then(data => {\n      console.log(data);\n      statusChanged = true;\n    }).catch(error => {\n      console.log(\"Error message:\");\n      console.error(error.message);\n    });\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(statusChanged);\n      }, 2000);\n    });\n  }\n  async function goBack() {\n    const changeStatus = await fetchChangeStatus();\n    console.log(changeStatus);\n    if (changeStatus) {\n      window.location.hash = '#VM-home';\n      location.reload();\n    }\n  }\n  goBack();\n}\nfunction restartVMRequest(vmName, resourceGroup) {\n  const pageTitle = document.createElement('h1');\n  pageTitle.style.justifySelf = \"center\";\n  pageTitle.setAttribute('class', 'content-title');\n  const titleText = document.createTextNode(\"Processing Request\");\n  pageTitle.appendChild(titleText);\n  const titleElement = document.getElementById('title-wrapper');\n  titleElement.style.justifySelf = \"center\";\n  titleElement.style.alignSelf = \"center\";\n  titleElement.style.paddingTop = \"500px\";\n  titleElement.style.paddingLeft = \"0px\";\n  titleElement.appendChild(pageTitle);\n  const loaderMain = document.createElement('div');\n  loaderMain.setAttribute('class', 'lds-ellipsis');\n  const loaderChild1 = document.createElement('div');\n  loaderMain.appendChild(loaderChild1);\n  const loaderChild2 = document.createElement('div');\n  loaderMain.appendChild(loaderChild2);\n  const loaderChild3 = document.createElement('div');\n  loaderMain.appendChild(loaderChild3);\n  const loaderChild4 = document.createElement('div');\n  loaderMain.appendChild(loaderChild4);\n  titleElement.appendChild(loaderMain);\n  const subscriptionID = sessionStorage.getItem('subID');\n  let restartURL = 'https://management.azure.com'.concat(subscriptionID, '/resourceGroups/', resourceGroup, '/providers/Microsoft.Compute/virtualMachines/', vmName, '/restart?api-version=2023-07-01');\n  let token = sessionStorage.getItem('MyToken');\n  let header = new Headers();\n  header.append('Authorization', \"Bearer \".concat(token));\n  let restartRequest = new Request(restartURL, {\n    method: 'POST',\n    mode: 'cors',\n    headers: header\n  });\n  async function fetchRestart() {\n    let restart;\n    fetch(restartRequest).then(data => {\n      console.log(data);\n      restart = true;\n    }).catch(error => {\n      console.log(\"Error message:\");\n      console.error(error.message);\n    });\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(restart);\n      }, 2000);\n    });\n  }\n  async function goBack() {\n    const restart = await fetchRestart();\n    console.log(restart);\n    if (restart) {\n      window.location.hash = '#VM-home';\n      location.reload();\n    }\n  }\n  goBack();\n}\nlet sendAppServicesRequest = ev => {\n  const subscriptionID = sessionStorage.getItem('subID');\n  let appServicesInfo;\n  let appServicesURL = 'https://management.azure.com'.concat(subscriptionID, '/providers/Microsoft.Web/sites?api-version=2022-03-01');\n  let token = sessionStorage.getItem('MyToken');\n  let header = new Headers();\n  header.append('Authorization', \"Bearer \".concat(token));\n  let appServicesRequest = new Request(appServicesURL, {\n    method: 'GET',\n    mode: 'cors',\n    headers: header\n  });\n\n  //Create function that actually sends the request\n  async function fetchAppServices() {\n    fetch(appServicesRequest).then(response => response.json()).then(data => {\n      console.log(data);\n      appServicesInfo = data;\n    }).catch(error => {\n      console.log(\"Error message:\");\n      console.error(error.message);\n    });\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(appServicesInfo);\n      }, 2000);\n    });\n  }\n  async function addAppServicesToHTML() {\n    const appServiceInfo = await fetchAppServices();\n\n    //Create title and add to page\n    const pageTitle = document.createElement('h1');\n    pageTitle.setAttribute('class', 'content-title');\n    const titleText = document.createTextNode(\"App Services\");\n    pageTitle.appendChild(titleText);\n    const titleElement = document.getElementById('title-wrapper');\n    titleElement.appendChild(pageTitle);\n\n    //Create header and add to page\n    const newEntry = document.createElement('tr');\n    newEntry.setAttribute('class', 'content-entry');\n\n    //Create element for name header\n    const nameElement = document.createElement('div');\n    nameElement.setAttribute('class', 'content-name');\n    const nameText = document.createTextNode('Name');\n    nameElement.appendChild(nameText);\n    newEntry.appendChild(nameElement);\n\n    //Create element for status header\n    const stateElement = document.createElement('div');\n    stateElement.setAttribute('class', 'content-state');\n    const stateText = document.createTextNode('Status');\n    stateElement.appendChild(stateText);\n    newEntry.appendChild(stateElement);\n    const tableElement = document.getElementById('content-list');\n    tableElement.appendChild(newEntry);\n\n    //Add each App Service info to page\n    if (appServiceInfo.value.length > 0) {\n      for (let i = 0; i < appServiceInfo.value.length; i++) {\n        //Create table entry\n        const newEntry = document.createElement('tr');\n        newEntry.setAttribute('class', 'content-entry');\n\n        //Create element for app name\n        const nameElement = document.createElement('div');\n        nameElement.setAttribute('class', 'content-name');\n        const entryText = document.createTextNode(appServiceInfo.value[i].name);\n        nameElement.appendChild(entryText);\n        newEntry.appendChild(nameElement);\n\n        //Create element for app status\n        const stateElement = document.createElement('div');\n        stateElement.setAttribute('class', 'content-state');\n        const stateText = document.createTextNode(appServiceInfo.value[i].properties.state);\n        stateElement.appendChild(stateText);\n        newEntry.appendChild(stateElement);\n\n        //Create start/stop button\n        const buttonElement = document.createElement('button');\n        buttonElement.setAttribute('class', 'content-button');\n        var buttonText;\n        if (appServiceInfo.value[i].properties.state == 'Running') {\n          buttonText = document.createTextNode('Stop App');\n          buttonElement.addEventListener('click', () => {\n            window.location.hash = '#app-stop$'.concat(appServiceInfo.value[i].name, '$', appServiceInfo.value[i].id.split('/')[4]);\n            location.reload();\n          });\n        } else {\n          buttonText = document.createTextNode('Start App');\n          buttonElement.addEventListener('click', () => {\n            window.location.hash = '#app-start$'.concat(appServiceInfo.value[i].name, '$', appServiceInfo.value[i].id.split('/')[4]);\n            location.reload();\n          });\n        }\n        buttonElement.appendChild(buttonText);\n        newEntry.appendChild(buttonElement);\n\n        //Create restart button\n\n        if (stateElement.innerHTML == 'Running') {\n          const restartElement = document.createElement('button');\n          restartElement.setAttribute('class', 'content-button');\n          const restartText = document.createTextNode('Restart App');\n          restartElement.appendChild(restartText);\n          restartElement.addEventListener('click', () => {\n            window.location.hash = '#app-restart$'.concat(appServiceInfo.value[i].name, '$', appServiceInfo.value[i].id.split('/')[4]);\n            location.reload();\n          });\n          newEntry.appendChild(restartElement);\n        }\n        const tableElement = document.getElementById('content-list');\n        tableElement.appendChild(newEntry);\n      }\n    } else {\n      const nameElement = document.createElement('div');\n      nameElement.setAttribute('class', 'content-name');\n      const entryText = document.createTextNode(\"No Apps\");\n      nameElement.appendChild(entryText);\n      newEntry.appendChild(nameElement);\n    }\n  }\n  addAppServicesToHTML();\n};\nfunction changeAppStatusRequest(appName, resourceGroup, appRunning) {\n  const pageTitle = document.createElement('h1');\n  pageTitle.style.justifySelf = \"center\";\n  pageTitle.setAttribute('class', 'content-title');\n  const titleText = document.createTextNode(\"Processing Request\");\n  pageTitle.appendChild(titleText);\n  const titleElement = document.getElementById('title-wrapper');\n  titleElement.style.justifySelf = \"center\";\n  titleElement.style.alignSelf = \"center\";\n  titleElement.style.paddingTop = \"500px\";\n  titleElement.style.paddingLeft = \"0px\";\n  titleElement.appendChild(pageTitle);\n  const loaderMain = document.createElement('div');\n  loaderMain.setAttribute('class', 'lds-ellipsis');\n  const loaderChild1 = document.createElement('div');\n  loaderMain.appendChild(loaderChild1);\n  const loaderChild2 = document.createElement('div');\n  loaderMain.appendChild(loaderChild2);\n  const loaderChild3 = document.createElement('div');\n  loaderMain.appendChild(loaderChild3);\n  const loaderChild4 = document.createElement('div');\n  loaderMain.appendChild(loaderChild4);\n  titleElement.appendChild(loaderMain);\n  console.log(appRunning);\n  const subscriptionID = sessionStorage.getItem('subID');\n  let changeStatusURL;\n  let token = sessionStorage.getItem('MyToken');\n  let header = new Headers();\n  header.append('Authorization', \"Bearer \".concat(token));\n  let changeStatusRequest;\n  if (appRunning) {\n    changeStatusURL = 'https://management.azure.com'.concat(subscriptionID, '/resourceGroups/', resourceGroup, '/providers/Microsoft.Web/sites/', appName, '/stop?api-version=2022-03-01');\n    changeStatusRequest = new Request(changeStatusURL, {\n      method: 'POST',\n      mode: 'cors',\n      headers: header\n    });\n  } else {\n    changeStatusURL = 'https://management.azure.com'.concat(subscriptionID, '/resourceGroups/', resourceGroup, '/providers/Microsoft.Web/sites/', appName, '/start?api-version=2022-03-01');\n    changeStatusRequest = new Request(changeStatusURL, {\n      method: 'POST',\n      mode: 'cors',\n      headers: header\n    });\n  }\n  async function fetchChangeStatus() {\n    let statusChanged;\n    fetch(changeStatusRequest).then(data => {\n      console.log(data);\n      statusChanged = true;\n    }).catch(error => {\n      console.log(\"Error message:\");\n      console.error(error.message);\n    });\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(statusChanged);\n      }, 5000);\n    });\n  }\n  async function goBack() {\n    const changeStatus = await fetchChangeStatus();\n    console.log(changeStatus);\n    if (changeStatus) {\n      window.location.hash = '#app-services-home';\n      location.reload();\n    }\n  }\n  goBack();\n}\nfunction restartAppRequest(appName, resourceGroup) {\n  const pageTitle = document.createElement('h1');\n  pageTitle.style.justifySelf = \"center\";\n  pageTitle.setAttribute('class', 'content-title');\n  const titleText = document.createTextNode(\"Processing Request\");\n  pageTitle.appendChild(titleText);\n  const titleElement = document.getElementById('title-wrapper');\n  titleElement.style.justifySelf = \"center\";\n  titleElement.style.alignSelf = \"center\";\n  titleElement.style.paddingTop = \"500px\";\n  titleElement.style.paddingLeft = \"0px\";\n  titleElement.appendChild(pageTitle);\n  const loaderMain = document.createElement('div');\n  loaderMain.setAttribute('class', 'lds-ellipsis');\n  const loaderChild1 = document.createElement('div');\n  loaderMain.appendChild(loaderChild1);\n  const loaderChild2 = document.createElement('div');\n  loaderMain.appendChild(loaderChild2);\n  const loaderChild3 = document.createElement('div');\n  loaderMain.appendChild(loaderChild3);\n  const loaderChild4 = document.createElement('div');\n  loaderMain.appendChild(loaderChild4);\n  titleElement.appendChild(loaderMain);\n  const subscriptionID = sessionStorage.getItem('subID');\n  let restartURL = 'https://management.azure.com'.concat(subscriptionID, '/resourceGroups/', resourceGroup, '/providers/Microsoft.Web/sites/', appName, '/restart?api-version=2022-03-01');\n  let token = sessionStorage.getItem('MyToken');\n  let header = new Headers();\n  header.append('Authorization', \"Bearer \".concat(token));\n  let restartRequest = new Request(restartURL, {\n    method: 'POST',\n    mode: 'cors',\n    headers: header\n  });\n  async function fetchRestart() {\n    let restart;\n    fetch(restartRequest).then(data => {\n      console.log(data);\n      restart = true;\n    }).catch(error => {\n      console.log(\"Error message:\");\n      console.error(error.message);\n    });\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(restart);\n      }, 2000);\n    });\n  }\n  async function goBack() {\n    const restart = await fetchRestart();\n    console.log(restart);\n    if (restart) {\n      window.location.hash = '#app-services-home';\n      location.reload();\n    }\n  }\n  goBack();\n}\nlet sendResourceGroupRequest = ev => {\n  const subscriptionID = sessionStorage.getItem('subID');\n  let ResourceGroupInfo;\n  let ResourceGroupURL = 'https://management.azure.com'.concat(subscriptionID, '/resourcegroups?api-version=2021-04-01');\n  let token = sessionStorage.getItem('MyToken');\n  let header = new Headers();\n  header.append('Authorization', \"Bearer \".concat(token));\n  let ResourceGroupRequest = new Request(ResourceGroupURL, {\n    method: 'GET',\n    mode: 'cors',\n    headers: header\n  });\n\n  //Create function that actually sends the request\n  async function fetchResourceGroup() {\n    fetch(ResourceGroupRequest).then(response => response.json()).then(data => {\n      console.log(data);\n      ResourceGroupInfo = data;\n    }).catch(error => {\n      console.log(\"Error message:\");\n      console.error(error.message);\n    });\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(ResourceGroupInfo);\n      }, 2000);\n    });\n  }\n  async function addResourceGroupToHTML() {\n    const resourceGroupInfo = await fetchResourceGroup();\n\n    //Create title and add to page\n    const pageTitle = document.createElement('h1');\n    pageTitle.setAttribute('class', 'content-title');\n    const titleText = document.createTextNode(\"Resource Groups\");\n    pageTitle.appendChild(titleText);\n    const titleElement = document.getElementById('title-wrapper');\n    titleElement.appendChild(pageTitle);\n\n    //Create header and add to page\n    const newEntry = document.createElement('tr');\n    newEntry.setAttribute('class', 'content-entry');\n\n    //Create element for name header\n    const nameElement = document.createElement('div');\n    nameElement.setAttribute('class', 'content-name');\n    const nameText = document.createTextNode('Name');\n    nameElement.appendChild(nameText);\n    newEntry.appendChild(nameElement);\n    const tableElement = document.getElementById('content-list');\n    tableElement.appendChild(newEntry);\n\n    //Add each App Service info to page\n    if (resourceGroupInfo.value.length > 0) {\n      for (let i = 0; i < resourceGroupInfo.value.length; i++) {\n        //Create table entry\n        const newEntry = document.createElement('tr');\n        newEntry.setAttribute('class', 'content-entry');\n\n        //Create element for resource group name\n        const nameElement = document.createElement('div');\n        nameElement.setAttribute('class', 'content-name');\n        const entryText = document.createTextNode(resourceGroupInfo.value[i].name);\n        nameElement.appendChild(entryText);\n        newEntry.appendChild(nameElement);\n        const tableElement = document.getElementById('content-list');\n        tableElement.appendChild(newEntry);\n      }\n    } else {\n      const nameElement = document.createElement('div');\n      nameElement.setAttribute('class', 'content-name');\n      const entryText = document.createTextNode(\"No Resource Groups\");\n      nameElement.appendChild(entryText);\n      newEntry.appendChild(nameElement);\n    }\n  }\n  addResourceGroupToHTML();\n};"],"names":[],"sourceRoot":""}